name: Pre-Release
run-name: Pre-Release ${{ inputs.version-update }} version by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      version-update:
        description: "Version update"
        required: true
        default: "no update"
        type: choice
        options:
          - minor
          - patch
          - no update

env:
  NODE_VERSION: "20.16.0"

concurrency:
  group: release
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  check_branch:
    name: Check the release branch
    runs-on: ubuntu-22.04
    outputs:
      major_version: ${{ steps.extract_major_version.outputs.version }}
    steps:
      - name: Check branch name format
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if ! [[ $BRANCH_NAME =~ ^[0-9]+\.x$ ]]; then
            echo "Error: Branch name '$BRANCH_NAME' does not match the required pattern '<major_version>.x'"
            exit 1
          fi
          echo "Branch name '$BRANCH_NAME' is valid"

      - name: Extract major version
        id: extract_major_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          MAJOR_VERSION=$(echo $BRANCH_NAME | sed 's/\.x$//')
          echo "version=$MAJOR_VERSION" >> "$GITHUB_OUTPUT"
          echo "Extracted major version: $MAJOR_VERSION"

  pre_release:
    name: Create Pre-Release
    runs-on: ubuntu-22.04
    needs: [check_branch]
    outputs:
      release_id: ${{ steps.update-release.outputs.release_id }}
    steps:
      - name: Get Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v3
        with:
          application_id: ${{ vars.GH_MTR_PACKAGE_VERSIONS_APP_ID }}
          application_private_key: ${{ secrets.GH_MTR_PACKAGE_VERSIONS_APP_SECRET }}

      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          ref: main
          lfs: false
          token: ${{ steps.get_workflow_token.outputs.token }}

      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure github user
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      - name: Ensure that the major version matches the branch
        env:
          MAJOR_VERSION: ${{ needs.check_branch.outputs.major_version }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [[ "$CURRENT_VERSION" != $MAJOR_VERSION.* ]]; then
              npm version $MAJOR_VERSION.0.0 --no-git-tag-version
              echo "Updated version to match major version $MAJOR_VERSION"
          else
              echo "Version already matches major version $MAJOR_VERSION"
          fi

      - name: Update version in package.json
        working-directory: krait-ui
        if: github.event.inputs.version-update != 'no update'
        run: npm version $VERSION_UPDATE --no-git-tag-version
        env:
          VERSION_UPDATE: ${{ github.event.inputs.version-update }}

      - name: Set the version as pre-release(beta)
        id: create_tag
        working-directory: krait-ui
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}
        run: |
          TAG=$(npm version prerelease --preid=beta)
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      # - name: Commit the version update
      #   env:
      #     TAG_NAME: ${{ steps.create_tag.outputs.tag }}
      #   run: |
      #     git commit -am "[GHA] Update package version to $TAG_NAME"
      #     git push

      - name: Set pre-release tag
        id: update-release
        uses: ./.github/actions/set-release-tag
        with:
          # branch_name: ${{ github.ref_name }}
          branch_name: 1.x
          tag_name: ${{ steps.create_tag.outputs.tag }}

  # build_ui:
  #   name: Build UI Library
  #   needs: [pre_release]
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Get Token
  #       id: get_workflow_token
  #       uses: peter-murray/workflow-application-token-action@v3
  #       with:
  #         application_id: ${{ vars.GH_MTR_PACKAGE_VERSIONS_APP_ID }}
  #         application_private_key: ${{ secrets.GH_MTR_PACKAGE_VERSIONS_APP_SECRET }}

  #     - name: Checkout the repo
  #       uses: actions/checkout@v4
  #       with:
  #         ref: main
  #         lfs: false
  #         token: ${{ steps.get_workflow_token.outputs.token }}

  #     - name: Install NodeJS
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         registry-url: "https://registry.npmjs.org"

  #     - name: Retrieve the npm dependencies cache
  #       uses: actions/cache@v4
  #       id: node-modules-cache
  #       with:
  #         path: node_modules
  #         key: npm-dependencies-${{ runner.os }}-${{ hashFiles('krait-ui/package-lock.json') }}
  #         restore-keys: |
  #           npm-dependencies-${{ hashFiles('krait-ui/package-lock.json') }}
  #           npm-dependencies-

  #     - name: Install npm dependencies
  #       if: steps.node-modules-cache.outputs.cache-hit != 'true'
  #       run: cd krait-ui && npm ci

  #     - name: Build FE assets
  #       run: cd krait-ui && npm run build

  #     - name: Zip the distribution build
  #       run: cd krait-ui && zip -9qry "distribution-package.zip" "./" -i "dist/*" "package.json" "package-lock.json"

  #     - name: Upload an Asset in GitHub Release
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const {RELEASE_ID} = process.env

  #           const fs = require('fs').promises;
  #           await github.rest.repos.uploadReleaseAsset({
  #             name: 'distribution-package.zip',
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             release_id: ${{ env.RELEASE_ID }},
  #             data: await fs.readFile('./krait-ui/distribution-package.zip')
  #           });
  #       env:
  #         RELEASE_ID: ${{ needs.prerelease.outputs.release_id }}

  #     - name: Publish the NPM package
  #       run: cd krait-ui && npm publish --access public --tag dev
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
